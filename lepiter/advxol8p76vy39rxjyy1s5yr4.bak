{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-03T09:12:51.709+00:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2022-11-03T09:12:51.709+00:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wIS4Fu+oDQCU5C1lCodtrw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : ",\r\n\r\nin the tool I'm working on, I definitely went for the Martinelli Montanari mgu algorithm (you will find a lot of clear descriptions of the algorithm and even a nice youtube video with a \"concrete\" example).\r\n\r\nPlease, be aware that the unifier associates 'parse trees' (not formula tokens) to working vars (the &Wnn and &Cmm stuff).\r\n\r\nThe hard part is not to implement the (nice) algorithm, you first need to parse your statements and build parse trees (the algorithm works with 'terms' but 'parse trees' play the same role, thanks to set.mm non-ambiguity).\r\n\r\nAnd before building parse trees, you have to build the grammar :-) \r\nAnd this is done \"on the fly\" (it depends on the specific theory, i.e. .mm file).\r\nAnd, of course, you need to write a parser to feed with the (generated) grammar and each statement (I used nearly.js, thus I did not needed to write a new one).\r\n\r\nAnd once you've got parse trees, you'll need to build \"substitutions\" to feed the mgu algorithm with the 'starting pairs' of parse trees to unify.\r\n\r\nJust for fun, this is a Jest test of what you can do with Diagnostic(s) (in a language server) for a failing unification  (mp2parse is not defined here: it is an object of the class MmParser that parses .mm format and has been fed with a supersmall subset of set.mm)\r\n\r\ntest('Expect Working Var unification error', () => {\r\n    const mmpSource =\r\n        'd1:: |- &W2\\n' +\r\n        'd2:: |- &W2\\n' +\r\n        'qed:d1,d2:ax-mp |- ph';\r\n    const mmpParser: MmpParser = new MmpParser(mmpSource, mp2Parser.labelToStatementMap, mp2Parser.outermostBlock, mp2Parser.grammar, new WorkingVars());\r\n    mmpParser.parse();\r\n    expect(doesDiagnosticsContain(mmpParser.diagnostics, MmpParserErrorCode.workingVarUnificationError)).toBeTruthy();\r\n    expect(mmpParser.diagnostics.length).toBe(4);\r\n    mmpParser.diagnostics.forEach((diagnostic: Diagnostic) => {\r\n        if (diagnostic.code == MmpParserErrorCode.workingVarUnificationError) {\r\n            const errMsg = 'Working Var unification error: the  working var &W2 should be ' +\r\n                'replaced with the following subformula, containing itself ( &W2 -> ph )';\r\n            expect(diagnostic.message).toEqual(errMsg);\r\n            expect(diagnostic.range.start.line == 0 || diagnostic.range.start.line == 1).toBeTruthy();\r\n            expect(diagnostic.range.start.character).toBe(8);\r\n            expect(diagnostic.range.end.character).toBe(11);\r\n        }\r\n    });\r\n});\r\n\r\nHTH\r\nGlauco\r\n"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-03T09:12:09.055+00:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2022-11-03T09:12:21.808+00:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Martinelli Montanari mgu algorithm "
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "301fb816-efa8-0d00-94e3-c7300a876daf"
	}
}